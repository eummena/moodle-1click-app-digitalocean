{"version":3,"sources":["../src/search.js"],"names":["init","pendingPromise","Pending","root","selectors","regions","contentbank","registerListenerEvents","resolve","searchInput","find","elements","searchinput","on","actions","search","e","preventDefault","toggleSearchResultsView","value","clearSearch","focus","addEventListener","body","searchQuery","clearSearchButton","navbarBreadcrumb","cbnavbarbreadcrumb","navbarTotal","cbnavbartotalsearch","filteredContents","filterContents","length","classList","remove","add","innerHTML","searchTerm","contents","Array","from","listitem","searchResults","forEach","content","contentName","getAttribute","toLowerCase","includes","push","contentNameElement","querySelector","cbcontentname","highlight","text","highlightText","result","pos","indexOf","substr"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Search methods for finding contents in the content bank.\n *\n * @module     core_contentbank/search\n * @package    core_contentbank\n * @copyright  2020 Sara Arjona <sara@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport selectors from 'core_contentbank/selectors';\nimport {get_string as getString} from 'core/str';\nimport Pending from 'core/pending';\nimport {debounce} from 'core/utils';\n\n/**\n * Set up the search.\n *\n * @method init\n */\nexport const init = () => {\n    const pendingPromise = new Pending();\n\n    const root = $(selectors.regions.contentbank);\n    registerListenerEvents(root);\n\n    pendingPromise.resolve();\n};\n\n/**\n * Register contentbank search related event listeners.\n *\n * @method registerListenerEvents\n * @param {Object} root The root element for the contentbank.\n */\nconst registerListenerEvents = (root) => {\n\n    const searchInput = root.find(selectors.elements.searchinput)[0];\n\n    root.on('click', selectors.actions.search, function(e) {\n        e.preventDefault();\n        toggleSearchResultsView(root, searchInput.value);\n    });\n\n    root.on('click', selectors.actions.clearSearch, function(e) {\n        e.preventDefault();\n        searchInput.value = \"\";\n        searchInput.focus();\n        toggleSearchResultsView(root, searchInput.value);\n    });\n\n    // The search input is also triggered.\n    searchInput.addEventListener('input', debounce(() => {\n        // Display the search results.\n        toggleSearchResultsView(root, searchInput.value);\n    }, 300));\n\n};\n\n/**\n * Toggle (display/hide) the search results depending on the value of the search query.\n *\n * @method toggleSearchResultsView\n * @param {HTMLElement} body The root element for the contentbank.\n * @param {String} searchQuery The search query.\n */\nconst toggleSearchResultsView = async(body, searchQuery) => {\n    const clearSearchButton = body.find(selectors.actions.clearSearch)[0];\n\n    const navbarBreadcrumb = body.find(selectors.elements.cbnavbarbreadcrumb)[0];\n    const navbarTotal = body.find(selectors.elements.cbnavbartotalsearch)[0];\n    // Update the results.\n    const filteredContents = filterContents(body, searchQuery);\n    if (searchQuery.length > 0) {\n        // As the search query is present, search results should be displayed.\n\n        // Display the \"clear\" search button in the activity chooser search bar.\n        clearSearchButton.classList.remove('d-none');\n\n        // Change the cb-navbar to display total items found.\n        navbarBreadcrumb.classList.add('d-none');\n        navbarTotal.innerHTML = await getString('itemsfound', 'core_contentbank', filteredContents.length);\n        navbarTotal.classList.remove('d-none');\n    } else {\n        // As search query is not present, the search results should be removed.\n\n        // Hide the \"clear\" search button in the activity chooser search bar.\n        clearSearchButton.classList.add('d-none');\n\n        // Display again the breadcrumb in the navbar.\n        navbarBreadcrumb.classList.remove('d-none');\n        navbarTotal.classList.add('d-none');\n    }\n};\n\n/**\n * Return the list of contents which have a name that matches the given search term.\n *\n * @method filterContents\n * @param {HTMLElement} body The root element for the contentbank.\n * @param {String} searchTerm The search term to match.\n * @return {Array}\n */\nconst filterContents = (body, searchTerm) => {\n    const contents = Array.from(body.find(selectors.elements.listitem));\n    const searchResults = [];\n    contents.forEach((content) => {\n        const contentName = content.getAttribute('data-name');\n        if (searchTerm === '' || contentName.toLowerCase().includes(searchTerm.toLowerCase())) {\n            // The content matches the search criteria so it should be displayed and hightlighted.\n            searchResults.push(content);\n            const contentNameElement = content.querySelector(selectors.regions.cbcontentname);\n            contentNameElement.innerHTML = highlight(contentName, searchTerm);\n            content.classList.remove('d-none');\n        } else {\n            content.classList.add('d-none');\n        }\n    });\n\n    return searchResults;\n};\n\n/**\n * Highlight a given string in a text.\n *\n * @method highlight\n * @param  {String} text The whole text.\n * @param  {String} highlightText The piece of text to highlight.\n * @return {String}\n */\nconst highlight = (text, highlightText) => {\n    let result = text;\n    if (highlightText !== '') {\n        const pos = text.toLowerCase().indexOf(highlightText.toLowerCase());\n        if (pos > -1) {\n            result = text.substr(0, pos) + '<span class=\"matchtext\">' + text.substr(pos, highlightText.length) + '</span>' +\n                text.substr(pos + highlightText.length);\n        }\n    }\n\n    return result;\n};\n"],"file":"search.min.js"}